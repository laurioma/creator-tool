rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a brand owner of the campaign
    function isBrand(campaignId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        get(/databases/$(database)/documents/campaigns/$(campaignId)).data.brandId == request.auth.uid;
    }

    // Helper function to check if user is a creator for the campaign
    function isCreatorForCampaign(campaignId) {
      // We can only check the explicit document ID format in security rules
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/campaignCreators/$(request.auth.uid + '_' + campaignId));
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Campaigns collection rules
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.brandId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Brand can update anything
        resource.data.brandId == request.auth.uid ||
        // Any authenticated user can update creators field
        request.auth != null
      );
      allow delete: if isAuthenticated() && resource.data.brandId == request.auth.uid;
    }
    
    // Campaign Creators collection rules
    match /campaignCreators/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Brand can update
        docId.split('_')[0] == request.auth.uid ||
        // Creator can update their own assignments
        docId.split('_')[1] == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        // Brand can delete
        docId.split('_')[0] == request.auth.uid ||
        // Creator can delete their own assignments
        docId.split('_')[1] == request.auth.uid
      );
    }

    // Links collection rules
    match /campaigns/{campaignId}/links/{linkId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        // Brand can create links
        isBrand(campaignId) ||
        // Creator can create links if they have a document in campaignCreators with explicit ID format
        isCreatorForCampaign(campaignId)
      );
      allow update: if isAuthenticated() && (
        // Brand can update any link
        isBrand(campaignId) ||
        // Creator can only update their own links
        resource.data.creatorId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        // Brand can delete any link
        isBrand(campaignId) ||
        // Creator can only delete their own links
        resource.data.creatorId == request.auth.uid
      );
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}