service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a creator of the campaign
    function isCreator(campaignId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/campaigns/$(campaignId)).data.creators.hasAny([request.auth.uid]);
    }

    // Helper function to check if the update only adds the current user to creators
    function isAddingSelfToCreators() {
      let newData = request.resource.data;
      let oldData = resource.data;
      
      // Check if all fields except creators remain the same
      let otherFieldsSame = newData.brandId == oldData.brandId &&
                           newData.name == oldData.name &&
                           newData.description == oldData.description &&
                           newData.budget == oldData.budget &&
                           newData.status == oldData.status &&
                           newData.createdAt == oldData.createdAt;
      
      // Check if the only change to creators is adding the current user
      let oldCreators = oldData.creators || [];
      let newCreators = newData.creators || [];
      let onlyAddedSelf = newCreators.size() == oldCreators.size() + 1 &&
                         newCreators.hasAll(oldCreators) &&
                         newCreators.hasAny([request.auth.uid]);
      
      return otherFieldsSame && onlyAddedSelf;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Campaigns collection rules
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.brandId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Brand can update anything
        resource.data.brandId == request.auth.uid ||
        // Any authenticated user can update creators field
        request.auth != null
      );
      allow delete: if isAuthenticated() && resource.data.brandId == request.auth.uid;
    }

    // Links collection rules
    match /campaigns/{campaignId}/links/{linkId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        // Brand can create links
        get(/databases/$(database)/documents/campaigns/$(campaignId)).data.brandId == request.auth.uid ||
        // Creator can create links for their assigned campaigns
        isCreator(campaignId)
      );
      allow update: if isAuthenticated() && (
        // Brand can update any link
        get(/databases/$(database)/documents/campaigns/$(campaignId)).data.brandId == request.auth.uid ||
        // Creator can only update their own links
        (isCreator(campaignId) && resource.data.creatorId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        // Brand can delete any link
        get(/databases/$(database)/documents/campaigns/$(campaignId)).data.brandId == request.auth.uid ||
        // Creator can only delete their own links
        (isCreator(campaignId) && resource.data.creatorId == request.auth.uid)
      );
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}